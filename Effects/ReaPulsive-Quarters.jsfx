version: 1.0.0
desc: ReaPulsive-Quarters
// Customized MIDI repeater
author: Rock Kennedy
about:
  # ReaPulsive-Quarters
changelog:
  - SpinOff With Default Note Type



/*
JSFX Name: ReaPulsive-Quarters
Author: Rockum (Rock Kennedy)
Based on MIDI Note Beat Repeater - RCJacH
Link: https://github.com/RCJacH/ReaScripts
*/

// License: GPL - http://www.gnu.org/licenses/gpl.html

desc:ReaPulse
//tags: MIDI processing
slider1:0<0,6,1{Local, Project}>Local Control / Project Control
slider11:4<0,9,1{4 Bars,2 Bars,1 Bar,Half Note,Quarter Note,1/8th,1/16th,1/32nd,1/64th,1/128th}>When Local Control, Repeat Rate =
slider12:0<0,4,1{NORMAL,TRIPLET,DOTTED,REST}>Type
slider13:2<0,4,1{off,1/2,1/4,1/8,1/16}>-Normal Type lock
slider14:0<0,127,1> Aftertouch -> Velocity
slider15:45<1,100,1> Duration - Sustain
slider20:1<0,1,1{Off,On}>-Sync to Beat
slider21:1<0,1,1{Off,On}>-On/Off





in_pin:none
out_pin:none

@init
// Constants from the MIDI specification:
NUM_CHANNELS            = 16;
NUM_NOTES               = 128;

STATUS_NOTE_ON          = $x90; // Note On Message
STATUS_NOTE_OFF         = $x80; // Note Off Message
STATUS_AFTERTOUCH       = $xA0; // AfterTouch Message
STATUS_CC               = $xB0; // Control Change Message
STATUS_CHANNEL_PRESSURE = $xD0; // Channel Pressure Message
STATUS_PITCH_WHEEL      = $xE0; // Pitch Wheel Message

i_noteCnt               = 0;
i_AT                    = 0;
active                  = 0;

// List of notes that are pressed
i_NotesPressedBit = 2; //Channel, Vel
a_NotesPressed    = 0;
memset(a_NotesPressed,0, NUM_NOTES * i_NotesPressedBit);

// List of notes that have sent Note On MIDI information
i_NotesOutBit     = 3; //Channel, Pit, Vel
a_NotesOut        = a_NotesPressed + NUM_NOTES * i_NotesPressedBit;
memset(a_NotesOut, 0, NUM_NOTES * i_NotesOutBit);

@slider
// rate as integer of a beat
i_div = (16/(2 ^ slider11));
// Return to even notes from triplet if division is equal to slider13 value
slider13 ? i_divlock = 2 / (2 ^ (slider13 - 1)):16;
// Triplet or Normal
slider12 == 1 ? i_div < i_divlock ? i_div *= 2/3;
// Dotted
slider12 == 2 ? i_div *= 3/2;
i_AT = slider14;
i_gate = slider15 / 100;
i_divGate = i_div * i_gate;
b_sync = slider20;
on = slider21;

@block

while(midirecv(offset,msg1,msg2,msg3)) (
  // Break up the MIDI message into its component parameters.
  in_ch = msg1 & $x0F;
  in_type = msg1 & $xF0;
  in_pit = msg2;
  in_vel = msg3;
  block = 0;

  (in_type == STATUS_NOTE_ON || in_type == STATUS_NOTE_OFF) ? (
    in_type == STATUS_NOTE_ON ? samplesTrigger = offset;
    i_noteCnt += (in_type == STATUS_NOTE_ON && in_vel > 0) ? 1:-1;
    a_NotesPressed[in_pit*i_NotesPressedBit] = in_ch;
    a_NotesPressed[in_pit*i_NotesPressedBit + 1] = in_vel;
    block = on ? 1:0;
    // Pressed Note are blocked if script is active.
  ); // Note ON/OFF

  (in_type == STATUS_CHANNEL_PRESSURE) ? (
    i_AT = in_pit;
    slider14 = i_AT;
    block = 1; // Do not output Channel Pressure
  );
  // Pass Original MIDI Data
  !block?midisend(offset, msg1, msg2, msg3);

); //while MIDI in

// Calculate Repeated Notes
i_noteCnt && on ? (
  // If keys are pressed while triggered
  b_syncChk = b_sync && (play_state&1 || play_state&5) ? 1 : 0;
  // rate to sample
  samples_per_beat = srate * 60 / tempo;
  beats_per_sample = ( tempo / 60 ) / srate;
  beats_per_block = samplesblock * beats_per_sample;
  div_next_block = floor((beat_position + beats_per_block) / i_div);
  div_this_block = floor((beat_position) / i_div);
  i_divSample = i_div * samples_per_beat;
  
  // Check if Note-On trigger happens in this samplesblock based on sync/play setting
  b_onTrigger = b_syncChk ? (
    beat_position == 0 || div_next_block > div_this_block ? 1 : 0;
    ) : (
    samplesTrigger < samplesblock || floor((samplesTrigger + samplesblock) / i_divSample) > floor(samplesTrigger / i_divSample) ? 1 : 0;
  );

  // If note(s) is already being triggered
  active ? (
    b_offTrigger = b_syncChk ? ( 
      beat_position + beats_per_block > active_pos + i_divGate ? 1 : 0;
      ):(
      (samplesTrigger + samplesblock) % i_divSample > i_divSample * i_gate ? 1 : 0;
    );
    b_offTrigger ? (
      ofs = b_syncChk ? (active_pos + i_divGate - beat_position) * samples_per_beat : 
      i_divSample * i_gate - samplesTrigger % i_divSample;
      // Note-Off all pressed notes
      loopOut = 0; loop(active,
        a_NotesOut[loopOut + 2] ? (
          outCh = a_NotesOut[loopOut];
          outPit = a_NotesOut[loopOut + 1];
          midisend(ofs, STATUS_NOTE_OFF|outCh, outPit);
        );
        loopOut += i_NotesOutBit;
      ); // loopOut 
      active = 0;
    ); //offTrigger
  ); //active?

  // If Note-On triggers
  b_onTrigger ? (
    ofs = b_syncChk ? (ceil(beat_position / i_div) * i_div - beat_position) * samples_per_beat :
      ceil(samplesTrigger / i_divSample) * samples_per_beat - samplesTrigger;
    // Note-On all pressed notes
    loopPit = 0; loopOut = 0; loop(NUM_NOTES,
      outCh = a_NotesPressed[loopPit];
      outPit = loopPit/i_NotesPressedBit;
      outVel = a_NotesPressed[loopPit + 1];
      outVel ? (
        i_AT ? outVel = i_AT;
        midisend(ofs, STATUS_NOTE_ON|outCh, outPit, outVel);
        a_NotesOut[loopOut] = outCh;
        a_NotesOut[loopOut + 1] = outPit;
        a_NotesOut[loopOut + 2] = outVel;
        loopOut += i_NotesOutBit;
        active += 1;
      ); //outVel
      loopPit += i_NotesPressedBit;
    ); //loopPit
    // Mark position of last Note-On
    active_pos = beat_position + ofs * beats_per_sample;
  ); // b_onTrigger
  samplesTrigger += samplesblock;
); //on


active && (!i_noteCnt || !on) ? (
  loopOut = 0; loop(active,
    a_NotesOut[loopOut + 2] ? (
      outCh = a_NotesOut[loopOut];
      outPit = a_NotesOut[loopOut + 1];
      midisend(0, STATUS_NOTE_OFF|outCh, outPit);
    );
    loopOut += i_NotesOutBit;
  ); // loopOut 
  memset(a_NotesOut, 0, NUM_NOTES * i_NotesOutBit);
  active = 0;
); //active
